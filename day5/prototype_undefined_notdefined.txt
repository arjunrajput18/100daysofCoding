


// A variable that has not been assigned a value is of type undefined
// undefined is a property of the global object. That is, it is a variable in global scope






console.log(first);
var first=4
console.log(first)


// console.log(second)


//not defined" is usually caused by a typo, or by trying to access a variable that is out of scope.


let obj1={
  name:"Arjun",
  getName:function(){
    return this.name
  },
  getRoll:function(){
    return this.roll
  },
  getClass:function(){
    return this.class
  }
}

console.log(obj1)

let obj2={
  roll:60,
  sub:"maths",
  __proto__:obj1
}
console.log(obj2)
console.log(obj2.getName())
console.log(obj2.getRoll())



let obj3={
  class:"CSE",
  __proto__:obj2
}

console.log(obj3.getClass())




const object =new Object();
console.log(object)

const array=new Array();
console.log(array)

Array.prototype.show=function(){
  return this+" hii";
}

const cities=["Mumbai","pune"]

console.log(cities.show())



Array.prototype.convertIntoObject=function(){
  let newObj={};
  this.forEach(element=>{
    newObj[element]=element;
  })
  return newObj;
}

console.log(cities.convertIntoObject());




function MyPrototype(name,roll){
  this.name=name;
  this.roll=roll;
}

MyPrototype.prototype=obj1;

const myproto=new MyPrototype("ayushi","61")

console.log(myproto)
console.log(myproto.getName())
console.log(myproto.getRoll())

var number = [2, 5, 6];
Array.prototype.sum = function () {
  let total = 0;
  this.forEach(currElem => {
    total = total + currElem;
  })
  return total;

}
console.log(number.sum());


// Every object in JavaScript has a built-in property, which is called its prototype. The prototype is itself an object, so the prototype will have its own prototype, making what's called a prototype chain. The chain ends when we reach a prototype that has null for its own prototype
// All JavaScript objects inherit properties and methods from a prototype


let obj4={
  name:"Arjun",
  sub:"sci",
  __proto__:obj3,
  getsub:function(){
    return this.sub
  }
}


console.log(obj4.getsub())