
//video 13
//call: binds the this value, invokes the function, and allows you to pass a list of arguments.

// apply: binds the this value, invokes the function, and allows you to pass arguments as an array.

// bind: binds the this value, returns a new function, and allows you to pass in a list of arguments.
//bind vs this
//The bind method binds the this value to the function and returns a new function. However, we still need to separately invoke the returned function.

import React, { Component } from "react";

class eventHandling extends Component {
    thiswithArrow = () => {
    console.log("Hello Arjun", this);
  };


  thisWithoutArrow(){
    console.log("Hello Arjun", this);
  }

  render() {
    return (
      <div>
        <button onClick={this.thisWithoutArrow}>this without Arrow </button>
<br></br>
<br></br>

        <button onClick={this.thiswithArrow}>this with  Arrow</button>
      </div>
    );
  }
}



//video 13
//call: binds the this value, invokes the function, and allows you to pass a list of arguments.

// apply: binds the this value, invokes the function, and allows you to pass arguments as an array.

// bind: binds the this value, returns a new function, and allows you to pass in a list of arguments.
//bind vs this
//The bind method binds the this value to the function and returns a new function. However, we still need to separately invoke the returned function.

// import React, { Component } from "react";

// class eventHandling extends Component {



//     thiswithArrow = () => {
//     console.log("Hello Arjun", this);
//   };


//   thisWithoutArrow(){
//     console.log("Hello Arjun", this);
//   }

//   render() {
//     return (
//       <div>
//         <button onClick={this.thisWithoutArrow}>this without Arrow </button>
// <br></br>
// <br></br>

//         <button onClick={this.thiswithArrow}>this with  Arrow</button>
//       </div>
//     );
//   }
// }

// export default eventHandling;

import React, { Component } from "react";

class eventHandling extends Component {
    
    constructor(){
        super();
       this.thisWithoutArrow=this.thisWithoutArrow.bind(this)

        this.state={
            course:"MCA"
        }

    }


    thiswithArrow = () => {
    console.log("Hello Arjun", this.state.course);  //we can access this without  using bind declaration method with the help of arrow syntax.
 if(this.state.course==="MCA"){
    this.setState({
        course:"BCA"
    })
 } else{
    this.setState({
        course:"MCA"
    })
 }
    
  };


  thisWithoutArrow(){
    console.log("Hello Arjun", this.state.course);
  }

  render() {
    return (
      <div>
        <button onClick={this.thisWithoutArrow}>this without Arrow </button>
<br></br>
<br></br>
{this.state.course}
        <button onClick={this.thiswithArrow}>this with  Arrow</button>
      </div>
    );
  }
}

export default eventHandling;



video 14

import React, { Component } from "react";

class eventHandling extends Component {
    
    constructor(props){
        super(props);
       this.thisWithoutArrow=this.thisWithoutArrow.bind(this)

        this.state={
            course:"MCA",
            roll:this.props.roll
        }

    }


    thiswithArrow = () => {
    console.log("Hello Arjun", this.state.course);  //we can access this without  using bind declaration method with the help of arrow syntax.
 if(this.state.course==="MCA"){
    this.setState({
        course:"BCA"
    })
 } else{
    this.setState({
        course:"MCA"
    })
 }
    
  };


  thisWithoutArrow(){
    console.log("Hello Arjun", this.state.course,this.props.roll);
  }

    anchoreTag=(e)=> {
    e.preventDefault();
    console.log("Anchor Tag");
  }

  render() {
    return (
      <div>
      <div>
      <a href="https://github.com/arjunrajput18?tab=repositories" onClick={this.anchoreTag}>click me</a>
</div>
        <button onClick={this.thisWithoutArrow}>this without Arrow </button>
<br></br>
<br></br>
{this.state.course}
{this.props.roll}
        <button onClick={this.thiswithArrow}>this with  Arrow</button>
      </div>
    );
  }
}

export default eventHandling;
