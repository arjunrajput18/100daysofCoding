

// A closure gives you access to an outer function scope from an inner function.

function sum(a) {
    let b = 20;
    return function (c) {
      return a + b + c;
    }
  }
  
  let store = sum(10);
  console.log(store(20));
  



//The call() method calls the function with a given this value and arguments provided individually

var obj1={
    name:"Arjun",
    age:"25"
}


var obj2={
    name:"yash",
    age:"23"
}
function details(a){
console.log("Name "+this.name)
console.log(a)
console.log("\n")
}



details.call(obj1,"javascript")

details.call(obj2,"reactjs")

// apply is the similar to call but the only difference is instead of passing arguments one by one we pass the arguments in the form of array.

details.apply(obj1,["java"])
details.apply(obj1,["php"])


// bind is similar to call, but it solves the problem of sending object in call method every time.

 var bindedObject1=details.bind(obj1)
 bindedObject1("C")
 bindedObject1("C++")
var bindedObject=details.bind(obj2)

bindedObject("C")

bindedObject("C++")

